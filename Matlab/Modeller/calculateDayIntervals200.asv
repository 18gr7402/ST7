clc
close all

%% Hent data, ekskluder patienter, label data og opdeling data på dage pr. patient

%% Load data og ændre labName til en categorical, således matlab kobler et navn med en nummerisk værdi

%load('rand200pidlab');

c = categorical(rand200pidlab.labname(1:end));
rand200pidlab.labCategory = grp2idx(c);


%% Fjern labels

patientID=[rand200pidlab.patientunitstayid];
labCategory=[rand200pidlab.labCategory];
labResult=[rand200pidlab.labresult];
offset = [rand200pidlab.labresultoffset];

data = [patientID, labCategory, labResult, offset];

%% Her fjernes alle rækker med negative labresultoffset og output gemmes i en ny tabel
for i = 1:size(data, 1)
    ind(i) = all(data(i,:) >= 0);
end

dataUNeg = data(ind, :);

% Nu findes antal af patienter tilbage efter fjernelse af rækker med
% negative offset
[~,idu] = unique(dataUNeg(:,1));
uniquePidUNeg = dataUNeg(idu,1);

numUniPidUNeg = length(uniquePidUNeg);

%% Find patienterne med en eller flere glucosemåling(er) - glucose = category 79 og bedside glucose = category 69
for i = 1:size(dataUNeg, 1)
    idx(i) = all(dataUNeg(i,2) == 69 | all(dataUNeg(i,2) == 79));
end

dataUNegOnlyGlu = dataUNeg(idx, :);

% Nu findes antal patienter tilbage efter fjernelse af patienter uden
% glucose målinger
[~,idu] = unique(dataUNegOnlyGlu(:,1));
uniquePid = dataUNegOnlyGlu(idu,1);

numUniPid = length(uniquePid);

%% Lav en tabel med alle datarækker for hver patient - join uniquePid med dataUNeg
equalPid = dataUNeg(ismember(dataUNeg,uniquePid),:); %alle række med de inkluderede patienter er fundet (patienter med glucose målinger og ingen negative lab offset)


%% VI ER KOMMET HERTIL OG VI VED KUN AT DE OVENSTÅENDE SECTIONS KAN KØRES, VI LOVER IKKE NEDENSTÅENDE SECTIONS KØRER, DA VI IKKE HAR RØRT VED DEM!

%% Find unikke rows af patientid med tilhørende unittid
[~,idu] = unique(equalPid(:,1));
uniqueRows = equalPid(idu,:);

%% Find unikke rows af patient uden labes så det kan bruges til beregning
[u] = unique(equalPid(:,1));
uniquePatient = u;

%% Løkke til opdeling af målinger for hver unikke patientid
% Preallocate
testDay = zeros(length(equalPid(:,3)),1);

for index=1:length(uniquePatient)
    timeIndex = rand200pidlab.unitadmittime24(index);  % Find admit-time for patient 'index' 
    [h,m] = hms(timeIndex);  % Omregn til timer og minutter
    tidIMin = 60*h+m;
    tidTilMidnat = 1440-tidIMin;
    
    n=find(uniquePatient(index) == equalPid(:,1)); % Find de samples der tilhøre patient 'index'
            
    % Udregning af hvor mange dage patienten har data for. Der findes offset for den sidste måling (ved max(offset(n))). Dette divideres med 60*24 og rundes op.
    numberOfTestDays = ceil((max(equalPid(n,4))-tidTilMidnat)/1440);
    
    % Løkke for opdeling af dag 1 indtil antallet af dag med test. De der hører til dag 0 er allerede 0.
    for i=0:numberOfTestDays-1
    % Der findes de samples hvor patientens offset ligger over tidTilMidnat og under tidTilMadnat+(60*24). For hver iteration ligges i*(60*24) oveni begge for på den måde at skrifte til en ny dag. Dette gemmes hver gang på som dag(i+1).
        testDay(n(find((i*1440+tidTilMidnat) <= equalPid(n,4) & (i*1440+tidTilMidnat+1440) > equalPid(n,4))))=i+1;
    end
end

% Vi slutter med at samle data.
equalPid = [equalPid testDay];

%% Label data

n = find(equalPid(:,2) == 69 | equalPid(:,2) == 79);
M = equalPid(find(equalPid(:,2) == 69 | equalPid(:,2) == 79),3)<=70;

hej = n(M)

%Preallocate
dataLabel = zeros(length(equalPid),1);
dataLabel(hej)=1;


