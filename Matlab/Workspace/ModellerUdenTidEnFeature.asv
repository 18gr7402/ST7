clc
close all

%% Model på glukose mean uden tidsaspekt

%% Load data

load('hypoDiabetesAllMeasurementsMeanStd');
load('nohypoDiabetesAllMeasurementsMeanStd');

%% Lav labels og sammesætmatrix

hypoMeanStd(:,4) = ones(1:end);
nohypoMeanStd(:,4) = zeros(1:end);

% cv = cvpartition(size(hypoMeanStd,1),'HoldOut',0.2);
% splitIndex = cv.test;
% % Separate to training and test data
% testHypoMeanStd  = hypoMeanStd(splitIndex,:);
% trainHypoMeanStd = hypoMeanStd(~splitIndex,:); 
% 
% cv = cvpartition(size(nohypoMeanStd,1),'HoldOut',0.2);
% splitIndex = cv.test;
% % Separate to training and test data
% testnoHypoMeanStd  = nohypoMeanStd(splitIndex,:);
% trainnoHypoMeanStd = nohypoMeanStd(~splitIndex,:); 
% 
% % Samle i tænings- og testsæt
% trainData = [trainnoHypoMeanStd;trainHypoMeanStd];
% testData = [testnoHypoMeanStd;testHypoMeanStd];

allData = [nohypoMeanStd(:,2:4);hypoMeanStd(:,2:4)];
t
%% Opdelig af data til k-fold validation

nFold = 10;
n=size(allData,1);
c = cvpartition(n,'KFold',nFold);
% Preallocation
samLabelVec=zeros(n,1);
samScoreVec=zeros(n,2);

%% cross validation loop
for foldNo=1:nFold
    %% finds index on the training and test samples
    trainIndex=find(training(c,foldNo)==1);
    testIndex=find(test(c,foldNo)==1);
    %% classify the test samples based on the traning data
    Mdl = fitcdiscr(allData(trainIndex,:),trainLabelVec(trainIndex,:));
    [mFoldLabel,mFoldScore] = predict(Mdl,allData(testIndex,:));
    %% saves results for each m-fold
    samLabelVec(testIndex,:)=mFoldLabel;
    samScoreVec(testIndex,:)=mFoldScore;
end
